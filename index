<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Astartes Muster: Countdown - DEEP STRIKE IMMINENT</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@500;700;900&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');

        /* Warp Jump / Hyperspace Effect - ENHANCED */
        @keyframes warpSpeedStarsEnhanced {
            0% {
                transform: translateZ(-500px) translateY(0) scale(0.5); /* Start further back and smaller */
                opacity: 0;
            }
            20% {
                opacity: 1; /* Become fully visible quickly */
            }
            100% {
                transform: translateZ(1500px) translateY(-800px) scale(2.5); /* Move much further, larger, and more vertical displacement */
                opacity: 0;
            }
        }
        @keyframes warpTunnelPulsing {
            0% { transform: translate(-50%, -50%) scale(1); opacity: 0.1; filter: blur(2px); }
            50% { transform: translate(-50%, -50%) scale(1.8); opacity: 0.4; filter: blur(0px); }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 0.1; filter: blur(2px); }
        }

        @keyframes titleImpact {
            0% { transform: scale(0.95); text-shadow: 1px 1px 2px #000, 0 0 3px rgba(255, 215, 0, 0.3); }
            70% { transform: scale(1.02); text-shadow: 1px 1px 2px #000, 0 0 15px rgba(255, 215, 0, 0.9), 0 0 25px rgba(255, 215, 0, 0.6); }
            100% { transform: scale(1); text-shadow: 1px 1px 2px #000, 0 0 8px rgba(255, 215, 0, 0.6), 0 0 15px rgba(255, 215, 0, 0.4); }
        }
        @keyframes titlePulseOngoing {
            0% { text-shadow: 1px 1px 2px #000, 0 0 8px rgba(255, 215, 0, 0.6), 0 0 15px rgba(255, 215, 0, 0.4); }
            50% { text-shadow: 1px 1px 2px #000, 0 0 12px rgba(255, 215, 0, 0.8), 0 0 20px rgba(255, 215, 0, 0.5); }
            100% { text-shadow: 1px 1px 2px #000, 0 0 8px rgba(255, 215, 0, 0.6), 0 0 15px rgba(255, 215, 0, 0.4); }
        }
        @keyframes dataFlicker {
            0%, 100% { color: #FFD700; text-shadow: 1px 1px 2px rgba(0,0,0,0.7), 0 0 3px rgba(255,215,0,0.4), 0 0 5px #FFD700; }
            50% { color: #FFFACD; text-shadow: 1px 1px 2px rgba(0,0,0,0.7), 0 0 5px rgba(255,250,205,0.6), 0 0 8px #FFFACD; }
        }
        @keyframes containerEnergyPulse {
            0% { box-shadow: 0 0 0 2px #1E88E5, 0 0 8px rgba(30, 136, 229, 0.5), 0 0 12px rgba(30,136,229,0.3), inset 0 0 6px rgba(255, 215, 0, 0.3); }
            50% { box-shadow: 0 0 0 3px #309FFF, 0 0 12px rgba(48, 159, 255, 0.8), 0 0 20px rgba(48,159,255,0.5), inset 0 0 8px rgba(255, 215, 0, 0.5); }
            100% { box-shadow: 0 0 0 2px #1E88E5, 0 0 8px rgba(30, 136, 229, 0.5), 0 0 12px rgba(30,136,229,0.3), inset 0 0 6px rgba(255, 215, 0, 0.3); }
        }

        html { height: 100%; overflow: hidden; }
        body {
            font-family: 'Russo One', 'Orbitron', sans-serif;
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            min-height: 100vh; margin: 0; color: #e0e0e0; padding: 10px;
            background-color: #000208; /* Even deeper black void */
            position: relative; overflow: hidden;
            perspective: 1000px; /* Increased perspective for more depth */
        }

        .warp-background {
            position: absolute; top: 0; left: 0; width: 100%; height: 100%;
            z-index: 0; overflow: hidden;
        }
        .warp-background .star-streak {
            position: absolute;
            background-color: #CDEBFF; /* Brighter, more energetic blue-white */
            border-radius: 2px; /* Slightly less round, more "streaky" */
            opacity: 0;
            animation-name: warpSpeedStarsEnhanced;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
            /* Enhanced glow */
            box-shadow: 0 0 15px 5px #CDEBFF, 0 0 25px 10px rgba(205, 235, 255, 0.7), 0 0 5px 1px #FFF inset;
        }

        .warp-tunnel-effect {
            position: absolute; top: 50%; left: 50%; width: 300%; height: 300%; /* Larger tunnel */
            border-radius: 50%;
            background: radial-gradient(circle, rgba(10,25,49,0) 30%, rgba(48,159,255,0.15) 50%, rgba(30,136,229,0.25) 70%, rgba(10,25,49,0) 90%);
            transform: translate(-50%, -50%) scale(1);
            animation: warpTunnelPulsing 4s ease-in-out infinite;
            z-index: -1;
        }

        .content-wrapper {
            position: relative; z-index: 1; display: flex; flex-direction: column;
            align-items: center; justify-content: center; width: 100%;
        }
        .header-title {
            font-family: 'Russo One', sans-serif; font-size: 3em; color: #FFD700;
            margin-bottom: 35px; margin-top: 25px; text-align: center; line-height: 1.3;
            letter-spacing: 1.5px; text-transform: uppercase;
            animation: titleImpact 1.5s ease-out forwards, titlePulseOngoing 3s ease-in-out 1.5s infinite;
        }
        .timer-container {
            background: rgba(5, 15, 30, 0.9); /* Darker, more solid container */
            padding: 25px 35px; border-radius: 5px;
            margin-bottom: 35px; text-align: center; width: 90%; max-width: 650px;
            border: 2px solid #0A3891;
            animation: containerEnergyPulse 2.5s ease-in-out infinite;
        }
        h2 {
            font-family: 'Russo One', sans-serif; color: #CDEBFF;
            text-shadow: 1px 1px 2px #000, 0 0 3px rgba(0,0,0,0.5); font-size: 1.7em;
            margin-top: 0; margin-bottom: 20px; text-transform: uppercase; letter-spacing: 1px;
        }
        p.timer-text {
            font-family: 'Orbitron', sans-serif; font-weight: 900; font-size: 2.1em; color: #FFD700;
            animation: dataFlicker 1.2s linear infinite alternate;
            margin: 10px 0 0 0; line-height: 1.2;
        }
        #expired-message {
            font-family: 'Russo One', sans-serif; font-size: 2.2em; color: #FFA000;
            text-shadow: 1px 1px 2px #000, 0 0 10px rgba(255, 160, 0, 0.8), 0 0 5px #000;
            text-transform: uppercase;
        }
    </style>
</head>
<body>
    <div class="warp-background">
        <!-- Stars are now generated by JavaScript for better control and density -->
        <div class="warp-tunnel-effect"></div> <!-- Enabled tunnel effect -->
    </div>

    <div class="content-wrapper">
        <h1 class="header-title">The Codex Astartes Decrees:<br>New Campaign Imminent!</h1>
        <div class="timer-container">
            <h2>Time Until Chapter Redeployment:</h2>
            <p id="timer-total" class="timer-text">-- days, -- hours, -- minutes, -- seconds</p>
        </div>
        <div class="timer-container">
            <h2>Strategic Cycles Until Deployment <br>(Adjusted for Local Mandates):</h2>
            <p id="timer-weekdays" class="timer-text">-- weekdays, -- hours, -- minutes, -- seconds</p>
        </div>
        <div id="expired-message" style="display:none;">
            FOR THE EMPEROR! DEPLOYMENT INITIATED!
        </div>
    </div>

    <script>
        const targetDateUTC = new Date(Date.UTC(2025, 6, 31, 15, 0, 0));

        // ***** South African Public Holidays for June/July 2025 *****
        // Format: 'YYYY-MM-DD'
        const southAfricanPublicHolidays2025 = [
            '2025-06-16', // Youth Day (Monday) - As per user request
            // Add other public holidays for June & July 2025 here if any
        ];
        // ************************************************************

        const timerTotalElement = document.getElementById('timer-total');
        const timerWeekdaysElement = document.getElementById('timer-weekdays');
        const expiredMessageElement = document.getElementById('expired-message');
        
        function isPublicHoliday(date, holidays) {
            const dateString = date.toISOString().split('T')[0];
            return holidays.includes(dateString);
        }

        function calculateWeekdayDays(startDate, endDate, publicHolidays) {
            if (endDate.getTime() <= startDate.getTime()) return 0;
            
            let weekdayCount = 0;
            let currentDate = new Date(Date.UTC(startDate.getUTCFullYear(), startDate.getUTCMonth(), startDate.getUTCDate()));
            const finalDate = new Date(Date.UTC(endDate.getUTCFullYear(), endDate.getUTCMonth(), endDate.getUTCDate()));

            while (currentDate.getTime() <= finalDate.getTime()) {
                const dayOfWeek = currentDate.getUTCDay();
                if (dayOfWeek >= 1 && dayOfWeek <= 5) { // Monday to Friday
                    if (!isPublicHoliday(currentDate, publicHolidays)) {
                        // Special handling for the very first day if it's also the target day
                        if (currentDate.getTime() === finalDate.getTime() && 
                            startDate.getUTCFullYear() === endDate.getUTCFullYear() &&
                            startDate.getUTCMonth() === endDate.getUTCMonth() &&
                            startDate.getUTCDate() === endDate.getUTCDate()) {
                            if (endDate.getTime() > startDate.getTime()) { // Only count if target time hasn't passed
                                weekdayCount++;
                            }
                        } else {
                           weekdayCount++;
                        }
                    }
                }
                if (weekdayCount > 730) break;
                currentDate.setUTCDate(currentDate.getUTCDate() + 1);
            }
            return weekdayCount;
        }

        function updateTimers() {
            const now = new Date();
            const diff = targetDateUTC.getTime() - now.getTime();

            if (diff <= 0) {
                timerTotalElement.textContent = "0d, 0h, 0m, 0s";
                timerWeekdaysElement.textContent = "0wd, 0h, 0m, 0s";
                expiredMessageElement.style.display = 'block';
                document.querySelectorAll('.timer-container').forEach(el => el.style.display = 'none');
                clearInterval(intervalId);
                return;
            }

            const totalSeconds = Math.floor(diff / 1000);
            const seconds = totalSeconds % 60;
            const totalMinutes = Math.floor(totalSeconds / 60);
            const minutes = totalMinutes % 60;
            const totalHours = Math.floor(totalMinutes / 60);
            const hours = totalHours % 24;
            const days = Math.floor(totalHours / 24);

            timerTotalElement.textContent = `${days}d, ${hours}h, ${minutes}m, ${seconds}s`;
            
            const nowUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds()));
            const weekdayDays = calculateWeekdayDays(nowUTC, targetDateUTC, southAfricanPublicHolidays2025);
            timerWeekdaysElement.textContent = `${weekdayDays}wd, ${hours}h, ${minutes}m, ${seconds}s`;
        }

        const warpBackground = document.querySelector('.warp-background');
        if (warpBackground) {
            for (let i = 0; i < 75; i++) { // Increased number of stars to 75
                const star = document.createElement('div');
                star.classList.add('star-streak');
                star.style.left = `${Math.random() * 100}%`;
                // Bigger streaks: width 2-5px, height 50-150px
                star.style.width = `${Math.random() * 3 + 2}px`; 
                star.style.height = `${Math.random() * 100 + 50}px`; 
                star.style.animationDelay = `${Math.random() * 3}s`; 
                star.style.animationDuration = `${Math.random() * 1.5 + 1.5}s`; // Duration 1.5-3s
                warpBackground.appendChild(star);
            }
        }

        const intervalId = setInterval(updateTimers, 1000);
        updateTimers();
    </script>
</body>
</html>
